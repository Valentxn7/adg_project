@startuml
class adg.Analyser {
    + FIELD_NAME : int
    + FIELD_TYPE : int
    + FIELD_MODIFIER : int
    + CONSTRUCTOR_NAME : int
    + CONSTRUCTOR_MODIFIER : int
    + CONSTRUCTOR_PARAMETERS : int
    + METHOD_NAME : int
    + METHOD_RETURN_TYPE : int
    + METHOD_MODIFIER : int
    + METHOD_PARAMETERS : int
    - row_class : java.lang.Class
'----------------
    + adg.Analyser(java.lang.String)
    - getParameterTypeNames([Ljava.lang.Class;) : java.util.List
    + analyse() : adg.Classe
}
class adg.Classe {
    - class_name : java.lang.String
    - superclass : java.lang.String
    - interfaces : java.util.List
    - fields : java.util.List
    - constructors : java.util.List
    - methods : java.util.List
'----------------
    + adg.Classe(java.lang.String)
    + getSuperclass() : java.lang.String
    + getInterfaces() : java.util.List
    + getFields() : java.util.List
    + getMethods() : java.util.List
    + getConstructors() : java.util.List
    + getClassName() : java.lang.String
    + setFields(java.util.List) : void
    + setMethods(java.util.List) : void
    + UMLString() : java.lang.String
    + setSuperclass(java.lang.String) : void
    + setInterfaces(java.util.List) : void
    + setClassName(java.lang.String) : void
    - getUMLVisibility(java.lang.String) : java.lang.String
    + setConstructors(java.util.List) : void
}
class adg.ControleurCreateProject {
    - modelUML : adg.ModelUML
'----------------
    + adg.ControleurCreateProject(adg.ModelUML)
    + handle(javafx.event.ActionEvent) : void
    + handle(javafx.event.Event) : void
}
adg.ControleurCreateProject ..|> javafx.event.EventHandler
class adg.ControllerDragDrop {
    - model : adg.ModelUML
'----------------
    + adg.ControllerDragDrop(adg.ModelUML)
    + handle(javafx.event.Event) : void
    + handle(javafx.scene.input.DragEvent) : void
    + activerDragAndDrop(javafx.scene.layout.StackPane) : void
}
adg.ControllerDragDrop ..|> javafx.event.EventHandler
class adg.MainSave {
'----------------
    + adg.MainSave()
    + main([Ljava.lang.String;) : void
    - lambda$main$0(java.io.File, java.lang.String) : boolean
}
class adg.MainUML {
'----------------
    + adg.MainUML()
    + main([Ljava.lang.String;) : void
    + start(javafx.stage.Stage) : void
}
adg.MainUML --|> javafx.application.Application
class adg.ModelUML {
    - observateurs : java.util.ArrayList
    - classes : java.util.ArrayList
    - filePath : java.lang.String
'----------------
    + adg.ModelUML()
    + supprimerObservateur(adg.Observateur) : void
    + notifierObservateurs() : void
    + enregistrerObservateur(adg.Observateur) : void
    + getFilePath() : java.lang.String
    + creerProjetVierge() : void
    + ajouterClasse(adg.Classe) : void
    + setFilePath(java.lang.String) : void
}
adg.ModelUML ..|> adg.Sujet
class adg.Observateur {
'----------------
    + actualiser(adg.Sujet) : void
    + switchHome2diag() : void
}
class adg.Save {
    - instance : adg.Save
    - classes : java.util.List
    - vues : java.util.List
'----------------
    - adg.Save(java.util.List, java.util.List)
    + getInstance(java.util.List, java.util.List) : adg.Save
    + save(java.lang.String, java.lang.String) : void
    + getADG() : java.lang.String
    + getUML() : java.lang.String
}
class adg.Sujet {
'----------------
    + supprimerObservateur(adg.Observateur) : void
    + notifierObservateurs() : void
    + enregistrerObservateur(adg.Observateur) : void
}
class adg.VueClasse {
'----------------
    + adg.VueClasse()
    + toADGString() : java.lang.String
}
class adg.VueDiagramme {
    - modelUML : adg.ModelUML
'----------------
    + adg.VueDiagramme(adg.ModelUML)
    + actualiser(adg.Sujet) : void
    + switchHome2diag() : void
}
adg.VueDiagramme --|> javafx.scene.layout.StackPane
adg.VueDiagramme ..|> adg.Observateur
@enduml@startadg
@endadg
